{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Column","children","className","createBrowserHistory","basename","process","App","useState","data","selectedNodes","state","updateState","reader","FileReader","console","log","window","class","htmlFor","type","style","display","id","placeholder","onChange","event","readAsText","target","files","onload","e","a","JSON","parse","result","for","maxWidth","margin","Array","classifier","config","sizes","inputs","map","node","index","Button","variant","columns","_","columnIndex","rows","rowIndex","nodeIndex","isActive","activeNodes","includes","isOutput","programOutputs","popover","Popover","Title","as","Content","genes_per_node","genes","OverlayTrigger","placement","overlay","ref","triggerHandler","Table","striped","bordered","hover","connection_genes","gene","parameters","nodes","border","fontWeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b244cc63.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Popover, OverlayTrigger, Table } from 'react-bootstrap';\nimport { createBrowserHistory } from 'history';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst Column = ({ children }) => (\n  <div className=\"column\">{children}</div>\n);\n\nfunction App() {\n  const [state, updateState] = useState({\n    data: null,\n    selectedNodes: []\n  });\n  const reader = new FileReader();\nconsole.log(state);\nwindow.state = state;\n  return (\n    <div className=\"App\">\n      <form>\n        <div className=\"form-group\">\n          <label class=\"title\" htmlFor=\"exampleFormControlFile1\">Choose the file to be analysed</label>\n          <input type=\"file\" \n          style={{ display: \"none\" }}\n          className=\"form-control-file file-input\" \n          id=\"exampleFormControlFile1\" \n          placeholder=\"Choose file\" \n          onChange={\n            (event) => {\n              reader.readAsText(event.target.files[0]);\n              reader.onload = async (e) => { \n                updateState({ data: JSON.parse(e.target.result), selectedNodes: state.selectedNodes });\n              };\n            }\n          } />\n          <label for=\"exampleFormControlFile1\" class=\"custom-file-upload\">\n            Upload Result File\n        </label>\n        </div>\n      </form>  \n      {\n        state.data &&\n        (\n          <div style={{ maxWidth: '900px', margin: 'auto'}}>\n\n          <h1> Nodes:</h1>\n          <Column>\n            { [...Array(state.data.classifier.config.sizes.inputs)].map((node, index) => {\n              return (\n                <Button key={index + 1} variant=\"outline-primary\">{index + 1}</Button>\n                );\n              }) }\n          </Column>\n          \n          { [...Array(state.data.classifier.config.sizes.columns)].map((_, columnIndex) => {\n            return (\n              <Column>\n                { [...Array(state.data.classifier.config.sizes.rows)].map((node, rowIndex) => {\n                  const nodeIndex = rowIndex + 1 + state.data.classifier.config.sizes.inputs * columnIndex + state.data.classifier.config.sizes.inputs;\n                  const isActive = state.data.classifier.activeNodes.includes(nodeIndex);\n                  const isOutput = state.data.classifier.programOutputs.includes(nodeIndex);\n                  const popover = (\n                    <Popover id=\"popover-basic\">\n                      <Popover.Title as=\"h3\">Node {nodeIndex}</Popover.Title>\n                      <Popover.Content>\n                        <p>\n                        Function Gene: {(nodeIndex - state.data.classifier.config.sizes.inputs) * state.data.classifier.config.sizes.genes_per_node + 1 - state.data.classifier.config.sizes.inputs}<br />\n                          Input Genes: {(nodeIndex - state.data.classifier.config.sizes.inputs) * state.data.classifier.config.sizes.genes_per_node + 2 - state.data.classifier.config.sizes.inputs}, {(nodeIndex - state.data.classifier.config.sizes.inputs) * state.data.classifier.config.sizes.genes_per_node + 3 - state.data.classifier.config.sizes.inputs}\n                          (Nodes )<br/>\n                          Parameter Genes: {(nodeIndex - state.data.classifier.config.sizes.inputs) * state.data.classifier.config.sizes.genes_per_node + 4 - state.data.classifier.config.sizes.inputs}, {(nodeIndex - state.data.classifier.config.sizes.inputs) * state.data.classifier.config.sizes.genes_per_node + 5 - state.data.classifier.config.sizes.inputs}\n                        </p>\n                        <p>\n                        Function Value: {state.data.classifier.genes[(nodeIndex - state.data.classifier.config.sizes.inputs) * state.data.classifier.config.sizes.genes_per_node - state.data.classifier.config.sizes.inputs]}<br />\n                          Input Values: {state.data.classifier.genes[(nodeIndex - state.data.classifier.config.sizes.inputs) * state.data.classifier.config.sizes.genes_per_node + 1 - state.data.classifier.config.sizes.genes_per_node]}, {state.data.classifier.genes[(nodeIndex - state.data.classifier.config.sizes.inputs) * state.data.classifier.config.sizes.genes_per_node + 2 - state.data.classifier.config.sizes.genes_per_node]}<br />\n                          Parameter Values: {state.data.classifier.genes[(nodeIndex - state.data.classifier.config.sizes.inputs) * state.data.classifier.config.sizes.genes_per_node + 3- state.data.classifier.config.sizes.inputs]}, {state.data.classifier.genes[(nodeIndex - state.data.classifier.config.sizes.inputs) * state.data.classifier.config.sizes.genes_per_node + 4 - state.data.classifier.config.sizes.inputs]}\n                        </p>\n                      </Popover.Content>\n                    </Popover>\n                  );\n\n                  return (\n                    <OverlayTrigger placement=\"right\" overlay={popover}>\n                       {({ ref, ...triggerHandler }) => (\n                        <Button ref={ref} key={nodeIndex} {...triggerHandler} variant={isOutput ? \"warning\" : isActive ? \"outline-success\" : \"outline-light\" } className={isActive ? 'active': ''}>{\n                          nodeIndex\n                        }</Button>\n                        )}\n                    </OverlayTrigger>\n                  );\n                  })}\n              </Column>\n            );\n          }) }\n\n          <h1>Genotype</h1>\n          <Table striped bordered hover>\n        \n            <thead>\n            \n              <tr>\n                <th>Computational Node</th>\n                <th>Node</th>\n                <th>Function Gene</th>\n                {[...Array(state.data.classifier.config.sizes.connection_genes)].map((_, gene) => (<th>Connection Gene {gene + 1}</th>))}\n                {[...Array(state.data.classifier.config.sizes.parameters)].map((_, gene) => (<th>Parameter Gene {gene + 1}</th>))}\n              </tr>\n            </thead>\n            <tbody>\n            {[...Array(state.data.classifier.config.sizes.nodes - state.data.classifier.config.sizes.inputs)].map((_, nodeIndex) => (\n              <tr>\n                <td style={{ border: '1px dashed #dee2e6', fontWeight: 'bold'}}>{nodeIndex + 1}</td>\n                <td style={{ border: '1px dashed #dee2e6', fontWeight: 'bold'}}>{nodeIndex + 1 + state.data.classifier.config.sizes.inputs}</td>\n                <td>{state.data.classifier.genes[(nodeIndex * state.data.classifier.config.sizes.genes_per_node)]}</td>\n                {[...Array(state.data.classifier.config.sizes.connection_genes)].map((_, index) => (<td>{state.data.classifier.genes[nodeIndex * state.data.classifier.config.sizes.genes_per_node + index + 1]}</td>))}\n                {[...Array(state.data.classifier.config.sizes.parameters)].map((_, index) => (<td>{state.data.classifier.genes[nodeIndex * state.data.classifier.config.sizes.genes_per_node + state.data.classifier.config.sizes.connection_genes + 1 + index]}</td>))}\n              </tr>\n            ))}\n            </tbody>\n          </Table>\n\n\n          <h1>Active Nodes:</h1>\n            <Table striped bordered hover style={{ border: 'none'}}>\n            <tbody>\n            { state.data.classifier.activeNodes.map((node, index) => {\n              return (\n                <td className=\"display-inline-block\" key={index}>{node}</td>\n                );\n              }) }\n            </tbody>\n          </Table>\n\n          <h1>Output Computational Nodes:</h1>\n          <Table striped bordered hover style={{ border: 'none'}}>\n            <tbody>\n              { state.data.classifier.programOutputs.map((node, index) => {\n                return (\n                  <td className=\"display-inline-block\" key={index}>{node}</td>\n                  );\n                }) }\n            </tbody>\n          </Table>\n\n\n          <div className=\"list-genes\">\n          { state.data.classifier.genes.map((gene, index) => {\n            if (index % state.data.classifier.config.sizes.genes_per_node === 0) {\n                return (\n                  <><br />\n                  <span key={index} >\n                    <Button variant=\"outline-secondary\">{gene}</Button>\n                  </span>\n                  </>\n                );\n              } else {\n                return (\n                    <span key={index}><Button variant=\"outline-secondary\">{gene}</Button></span>\n                );\n              } \n            }) }\n\n          </div>\n          \n \n        </div>\n        )\n    }\n    </div>\n  );\n}\n\nexport const history = createBrowserHistory({\n  basename: process.env.PUBLIC_URL\n});\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}